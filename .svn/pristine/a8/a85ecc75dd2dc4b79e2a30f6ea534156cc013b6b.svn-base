/**
 * @Author:      zhanghq
 * @DateTime:    2018-01-11 15:55:16
 * @Description: y轴
 * @Last Modified By:   zhanghq
 * @Last Modified Time:    2018-01-11 15:55:16
 */

import d3 from 'd3'
import zrender from 'zrender'

export default class YAxis { 
  /**
   * 实例化
   * @param {Object} zr     zrender 实例对象
   * @param {Object} opt  配置项
   */
  constructor(zr, opt) {
    this.zr = zr
    this.config = opt
    this.ticks = opt.ticks || 5 // y轴默认刻度为5
  }

  render(data) {
    const { yHeight } = this.config
    
    // ============ y轴比例尺
    this.yScale = d3.scale.linear()
      .domain([0, d3.max(data)])
      .range([0, yHeight])
    // ============ 实例化一个组，存储线条和刻度  
    this.yAxisG = new zrender.Group()
    yAxisG.position = [0, yHeight]
    // 添加y轴线
    
    this.setYAxisText(data, yAxisG)
    this.zr.add(yAxisG)
    return this.yScale
  }

  /**
   *  画y轴线
   *  @example: [example]
   *  @return   {[type]}  [description]
   */
  drawAxisLine() {
    const { left, bottom } = this.config.margin
    const line = new zrender.Line({
      shape: {
        x1: left,
        x2: left,
        y1: bottom,
        y2: -yHeight + bottom
      },
      style: {
        stroke: '#454c72'
      }
    })
    this.yAxisG.add(line)  
  }

  /**
   * 添加y轴文字
   * @param {[type]} data   [description]
   * @param {[type]} yAxisG [description]
   */
  setYAxisText(data, yAxisG) {
    const this = this
    const { yHeight, itemStyle } = this.config
    const { left } = itemStyle.margin
    let max = d3.max(data)
    // 添加数据柱子上的文字
    data.map((d, i) => {
      const text = new zrender.Text({
        cursor: 'default',
        style: {
          text: d,
          textAlign: 'center',
          y: -this.yScale(d),
          x: this.xScale(i) + left,
          textFill: '#fff',
          opacity: 0
        }
      })
      text.animateTo({
        style: {
          opacity: 1
        }
      }, 400)
      yAxisG.add(text)
    })

    // 创建y轴文字
    let ticks = [1, 2, 3, 4, 5]
    ticks.map((d, i) => {
      const text = new zrender.Text({
        cursor: 'default',
        style: {
          text: parseInt(i * (max / ticks.length), 10),
          textAlign: 'end',
          y: -yHeight / ticks.length * i - 6,
          x: 0,
          textFill: '#fff',
          opacity: 0
        }
      })
      text.animateTo({
        style: {
          opacity: 1
        }
      }, 400)
      yAxisG.add(text)
      // 刻度线
      const line = new zrender.Line({
        shape: {
          x1: left,
          x2: left - 10,
          y1: -yHeight / ticks.length * i,
          y2: -yHeight / ticks.length * i
        },
        style: {
          stroke: '#454c72'
        }
      })
      yAxisG.add(line)
    })  
    this.zr.add(yAxisG)
  }
}

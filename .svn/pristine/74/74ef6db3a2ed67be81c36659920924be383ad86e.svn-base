// (function (global, factory) {

// 	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
// 	typeof define === 'function' && define.amd ? define(['exports'], factory) :
// 	(factory((global.echarts = {})));
// }(this, (function (exports) { 'use strict';})

(function(global, factory){
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports):
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.hycharts = {})))
})(this, function(exports) {  'use strict';


  var version = '1.0'
  var dependencies = {
    zrender: '4.0.1'
  };
  var version$1 = version
  var idBase = new Date() - 0;
  var DOM_ATTRIBUTE_KEY = '_hycharts_instance_';
  var instances$1 = {};    // ZRender实例map索引
  // 定义实例化对象
  var instances = {};

  /**
   * Map eventType to actionType
   * @type {Object}
   */
  var eventActionMap = {};

  // 数组原型上的方法
  var arrayProto = Array.prototype;
  var nativeForEach = arrayProto.forEach;
  // 一系列方法
  /**
   * 数组或对象遍历
   * @memberOf module:zrender/core/util
   * @param {Object|Array} obj
   * @param {Function} cb
   * @param {*} [context]
   */
  function each$1(obj, cb, context) {
    if (!(obj && cb)) {
        return;
    }
    if (obj.forEach && obj.forEach === nativeForEach) {
        obj.forEach(cb, context);
    }
    else if (obj.length === +obj.length) {
        for (var i = 0, len = obj.length; i < len; i++) {
            cb.call(context, obj[i], i, obj);
        }
    }
    else {
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                cb.call(context, obj[key], key, obj);
            }
        }
    }
  }

  var each = each$1;
  function enableConnect(chart) {
    var STATUS_PENDING = 0;
    var STATUS_UPDATING = 1;
    var STATUS_UPDATED = 2;
    var STATUS_KEY = '__connectUpdateStatus';

    function updateConnectedChartsStatus(charts, status) {
        for (var i = 0; i < charts.length; i++) {
            var otherChart = charts[i];
            otherChart[STATUS_KEY] = status;
        }
    }

    each(eventActionMap, function (actionType, eventType) {
        chart._messageCenter.on(eventType, function (event) {
            if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
                if (event && event.escapeConnect) {
                    return;
                }

                var action = chart.makeActionFromEvent(event);
                var otherCharts = [];

                each(instances, function (otherChart) {
                    if (otherChart !== chart && otherChart.group === chart.group) {
                        otherCharts.push(otherChart);
                    }
                });

                updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
                each(otherCharts, function (otherChart) {
                    if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
                        otherChart.dispatchAction(action);
                    }
                });
                updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
            }
        });
    });
}

  /**
 * zrender: 生成唯一id
 *
 * @author errorrik (errorrik@gmail.com)
 */

var idStart = 0x0907;

var guid = function () {
    return idStart++;
};

  /**
 * @module zrender/ZRender
 */
/**
 * @constructor
 * @alias module:zrender/ZRender
 * @param {string} id
 * @param {HTMLElement} dom
 * @param {Object} opts
 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
 * @param {number} [opts.devicePixelRatio]
 * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
 * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
 */
var ZRender = function (id, dom, opts) {

  opts = opts || {};

  /**
   * @type {HTMLDomElement}
   */
  this.dom = dom;

  /**
   * @type {string}
   */
  this.id = id;

  
};
 


var zrender = (Object.freeze || Object)({
  version: version$1,
  init: init$1,
  dispose: dispose$1,
  getInstance: getInstance,
  registerPainter: registerPainter
});

  /**
 * Initializing a zrender instance(初始化一个zrender)
 * @param {HTMLElement} dom
 * @param {Object} opts
 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
 * @param {number} [opts.devicePixelRatio]
 * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
 * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
 * @return {module:zrender/ZRender}
 */
function init$1(dom, opts) {
  var zr = new ZRender(guid(), dom, opts);
  instances$1[zr.id] = zr;
  console.log(zr)
  return zr;
}

/**
 * Dispose zrender instance
 * @param {module:zrender/ZRender} zr
 */
function dispose$1(zr) {
 
  if (zr) {
      zr.dispose();
  }
 
  else {
      for (var key in instances$1) {
          if (instances$1.hasOwnProperty(key)) {
              instances$1[key].dispose();
          }
      }
      instances$1 = {};
  }
 
  return this;
}

/**
 * Get zrender instance by id
 * @param {string} id zrender instance id
 * @return {module:zrender/ZRender}
 */
function getInstance(id) {
  return instances$1[id];
}

function registerPainter(name, Ctor) {
  painterCtors[name] = Ctor;
}

  /**
 * @module echarts~ECharts
 */
function HyCharts(dom, theme$$1, opts) {
  opts = opts || {};

  // Get theme by name
  if (typeof theme$$1 === 'string') {
      theme$$1 = themeStorage[theme$$1];
  }

  /**
   * @type {string}
   */
  this.id;

  /**
   * Group id
   * @type {string}
   */
  this.group;

  /**
   * @type {HTMLElement}
   * @private
   */
  this._dom = dom;

  var defaultRenderer = 'canvas';


  /**
   * @type {module:zrender/ZRender} 调用zrender 初始化，实例化canvas
   * @private
   */
  var zr = this._zr = init$1(dom, {
      renderer: opts.renderer || defaultRenderer,
      devicePixelRatio: opts.devicePixelRatio,
      width: opts.width,
      height: opts.height
  });
  /**
   * Expect 60 pfs.
   * @type {Function}
   * @private
   */
 // this._throttledZrFlush = throttle(bind(zr.flush, zr), 17);
}

  /**
   * 
   * @param {object} dom 节点
   * @param {object} key  键名
   * @param {object} value 键值
   */
  function setAttribute(dom, key, value) {
    dom.setAttribute
        ? dom.setAttribute(key, value)
        : (dom[key] = value);
  }

    /**
   * @param {HTMLElement} dom
   * @param {Object} [theme]
   * @param {Object} opts
   * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default
   * @param {string} [opts.renderer] Currently only 'canvas' is supported.
   * @param {number} [opts.width] Use clientWidth of the input `dom` by default.
   *                              Can be 'auto' (the same as null/undefined)
   * @param {number} [opts.height] Use clientHeight of the input `dom` by default.
   *                               Can be 'auto' (the same as null/undefined)
   */
  function init(dom, theme$$1, opts) {

    var chart = new HyCharts(dom, theme$$1, opts);
    chart.id = 'hyc_' + idBase++;
     
    instances[chart.id] = chart;

    setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);

    enableConnect(chart);

    return chart;
  }

  exports.version = version;
  exports.init = init;
})

/**
 * @Author:      zhanghq
 * @DateTime:    2018-01-08 09:06:03
 * @Description: 饼图
 * @Last Modified By:   zhanghq
 * @Last Modified Time:    2018-01-08 09:06:03
 */

import zrender from 'zrender'
import d3 from 'd3'
import _ from 'lodash'
import { zrenderInit } from '../../util/initZr'
import Pie from '../../util/util.js'
 
export default class BasePie {

  /**
   * 图表默认配置项
   * @return {object} 默认配置项
   */
  defaultSetting () {
    return{
      width: 600,
      height: 300,
      itemStyle: {
        width: 15,
        radius: 10,
        fill: ['#3ed5de', '#ffce10', '#00eeeb', '#3ed5de', '#ffce10', '#00eeeb'],
        margin: {
          top: 20,
          right: 20,
          bottom: 20,
          left: 20
        }
      }
    }  
  }

  /**
   *  构造函数
   */
  constructor(selector, opt) {
    this.selector = selector
    const defaultSetting = this.defaultSetting()
    this.config = _.merge({}, defaultSetting, opt)
    const { width, height } = this.config
    this.zr = zrenderInit(selector, width, height)
    // 创建饼图布局  
    this.pie = d3.layout.pie().sort(null) 
      .value((d) => d.value)
  }

  render(data) {
    const self = this
    // 转换数据  
    let pieData = self.pie(data)  
    self.setPieAttribute(pieData)
  }

  setPieAttribute(data) {
    const self = this
    const { width, height, itemStyle } = self.config
    const { fill } = itemStyle
    console.log(data)
    const arcG = new zrender.Group()
    arcG.position = [width / 2, height / 2]
    data.map((d, i) => {
      let arc = new Pie({
        shape: {
          cx: 0,
          cy: 0,
          innerRadius: 30,
          outerRadius: 50,
          startAngle: d.startAngle,
          endAngle: d.endAngle
        },
        style: {
          fill: fill[i] || '#ffce10'
        }
      })
     
      arcG.add(arc)
     })
    self.zr.add(arcG)
 
  }
}


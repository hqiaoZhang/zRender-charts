/**
 * @Author:      zhanghq
 * @DateTime:    2018-01-08 11:48:52
 * @Description: 同环比图表
 * @Last Modified By:   zhanghq
 * @Last Modified Time:    2018-01-08 11:48:52
 */

import d3 from 'd3'
import zrender from 'zrender'
import _ from 'lodash'
import { YAxis, XAxis } from '../../util/axis'
import { zrenderInit } from '../../util/initZr'
import { showTips, hideTips } from './tips.js'
import iconUrl from './images/icon.png'

export default class SameRingRation {
  /**
   * 图表默认配置项
   * @return {object} 默认配置项
   */
  defaultSetting () {
    return{
      width: 600,
      height: 300,
      itemStyle: {
        width: 15,
        radius: 10,
        fill: ['#08e2ff', '#0b6fff', '#00eeeb', '#3ed5de', '#ffce10', '#00eeeb'],
        margin: {
          top: 30,
          right: 20,
          bottom: 20,
          left: 50
        }
      }
    }  
  }

  /**
   * Creates an instance of Heatmap
   * @param {string} selector 容器元素选择器
   * @param {object} opt 图表组件配置项
   */
  constructor(selector, opt) {
    this.selector = selector
    const defaultSetting = this.defaultSetting()
    this.config = _.merge({}, defaultSetting, opt)
    const { width, height, itemStyle } = this.config
    const { top, right, bottom, left } = itemStyle.margin
    this.config.xWidth = width - left - right
    this.config.yHeight = height - top - bottom
    this.zr = zrenderInit(selector, width, height)
    // 实例化Y轴 
    this.yAxis = new YAxis(this.zr, this.config)
    // 实例化X轴
    this.xAxis = new XAxis(this.zr, this.config)
  }

  /**
   *  渲染
   *  @return   {array}  图表数据
   */
  render(data) {
    const self = this
    // 获取value值
    let tongbiData = [] // 同比数据
    let huanbiData = [] // 环比数据
    let valueData = [] // 数值
    self.data = data
    data.map((d) => {  
      tongbiData.push(d.tongbi)
      huanbiData.push(d.huanbi)
      valueData.push(d.value)
    })
    // 获取所有value
    let dataset = [...tongbiData, ...huanbiData]
    // 同比环比取出来
    let newData = [tongbiData, huanbiData]
 
    // 渲染X轴
    self.xScale = self.xAxis.render(data)
    // 渲染Y轴
    self.yScale = self.yAxis.render(dataset)
    const { yHeight } = self.config
    // 数值比例尺
    self.vScale = d3.scale.linear()
      .domain([0, d3.max(valueData)])
      .range([0, yHeight])  
    // 渲染矩形条  
    self.drawRect(newData)
    // 渲染折线
    self.drawLine(valueData)
    // 事件绑定
    self.bindHoverEvent()
  }

  drawLine(data) {
    const self = this
    const { left } = self.config.itemStyle.margin
    let lines = []
    let iconG = new zrender.Group()
    data.map((d, i) => {
      let x = self.xScale(i) + left
      let y = self.vScale(data[i])
      const icon = new zrender.Image({
        style: {
          image: iconUrl,
          width: 20,
          height: 20,
          x: x - 10,
          y: y - 10
        }
      })
      iconG.add(icon)
      lines.push([x, y])
    })
    // 实例化拆线
    const polyline = new zrender.Polyline({
      shape: {
        points: lines,
        smooth: '0'
      },
      style: {
        stroke: '#ffce10',
        fill: 'none',
        lineWidth: 2
      }
    })
    // 添加拆线
    self.zr.add(polyline)
    // 添加icon图标
    self.zr.add(iconG)
  }

  /**
   * 矩形属性设置
   * @param {array} data 图表数据
   */
  drawRect(data) {
    const self = this
    const { itemStyle, height } = self.config
    const { fill, margin, width: iWidth } = itemStyle
    const { left, bottom } = margin
    const rectsG = new zrender.Group()
    rectsG.position = [left, -bottom]
    data.map((d, i) => {
      d.map((v, j) => {
        let h = self.yScale(v)
        let rect = new zrender.Rect({
          shape: {
            width: iWidth,
            height: h,
            x: self.xScale(j) - iWidth + i * iWidth,
            y: height - h
          },
          style: {
            fill: fill[i]
          }
        })
        rectsG.add(rect)
        // self.eventHoverRect(self.xScale(j) + iWidth * 2)
      })
    })
    self.zr.add(rectsG)
  }

  /**
   * 绑定鼠标悬浮事件
   * @param  {Array} series 配置项
   * @return {void}  void
   */
  bindHoverEvent() {
    const self = this
    const { xWidth, yHeight, itemStyle } = self.config
    const { left, top } = itemStyle.margin
    let boundingRect = new zrender.BoundingRect(left + left / 2, top, xWidth, yHeight)
    self.zr.on('mousemove', evt => {
      for(let i = 0, len = self.data.length; i < len; i++) {
        let posi = {
          x: evt.offsetX, 
          y: evt.offsetY
        }
        if(boundingRect.contain(posi.x, posi.y)) {
          posi = {
            x: evt.event.pageX,
            y: evt.event.pageY - 90
          }
          console.log(self.data[i])
          showTips(self.selector, self.data[i], posi) 
          // self.eventHoverRect(self.xScale(i))
        }else {
          // 移除提示框
          hideTips(self.selector)
          self.zr.remove(self.eventHoverRect)
        }
      }
  
    })
  }

  eventHoverRect(x) {
    const { itemStyle, yHeight } = this.config
    const { width: iWidth, margin } = itemStyle
    this.hoverRect = new zrender.Rect({
      zlevel: 0,
      shape: {
        width: iWidth * 3,
        height: yHeight,
        x: x,
        y: margin.top
      },
      style: {
        fill: '#000',
        opacity: '0.2'
      }
    })
    this.zr.add(this.hoverRect)
  }
}

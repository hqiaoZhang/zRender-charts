/**
 * @Author:      zhanghq
 * @DateTime:    2018-01-11 15:55:16
 * @Description: y轴
 * @Last Modified By:   zhanghq
 * @Last Modified Time:    2018-01-11 15:55:16
 */

import d3 from 'd3'
import zrender from 'zrender'
import _ from 'lodash'

export default class YAxis { 
  defaultSetting() {
    return {
      yAxis: { // y轴配置项
        // 文字配置
        label: { 
          color: '#fff',
          fontSize: 12
        },
        // 刻度线配置
        axisTick: {
          color: '#454c72'
        },
        min: 0,
        ticks: 5 // y轴坐标刻度
      }
    }
  }
  /**
   * 实例化
   * @param {Object} zr     zrender 实例对象
   * @param {Object} opt  配置项
   */
  constructor(zr, opt) {
    this.zr = zr
    // 获取配置项
    const defaultSetting = this.defaultSetting()
    this.config = _.merge({}, defaultSetting, opt)
    const { yHeight } = this.config
    // 实例化一个组，存储线条和刻度  
    this.axisG = new zrender.Group()
    this.axisG.position = [0, yHeight]
  }

  /**
   *  渲染
   *  @param    {array}  data 图表数据
   *  @return   {function}   y轴坐标
   */
  render(data) {
    const { yHeight } = this.config
    // y轴比例尺
    this.yScale = d3.scale.linear()
      .domain([0, d3.max(data) * 1.1])
      .range([0, yHeight])
    // 渲染轴线
    this.axisLine()  
    // 渲染文字
    this.axisLabel(data)
    // 渲染刻度线
    this.axisTick()
    // 添加
    this.zr.add(this.axisG)
    return this.yScale
  }
 
  /**
   *  画y轴线
   *  @example: [example]
   *  @return   {[type]}  [description]
   */
  axisLine() {
    const { yHeight, itemStyle } = this.config
    const { left, top } = itemStyle.margin
    const line = new zrender.Line({
      shape: {
        x1: left,
        x2: left,
        y1: top,
        y2: -yHeight + top
      },
      style: {
        stroke: '#454c72'
      }
    })
    this.axisG.add(line)  
  }

  /**
   *  刻度线
   *  @return   {void}   
   */
  axisTick() {
    const { ticks, axisTick } = this.config.yAxis
    const { yHeight, itemStyle } = this.config
    const { left } = itemStyle.margin
    let linesG = new zrender.Group() // 创建一个组
    for(let i = 0; i < ticks; i++) {
      // 刻度线
      const line = new zrender.Line({
        shape: {
          x1: left,
          x2: left - 10,
          y1: -yHeight / ticks * i,
          y2: -yHeight / ticks * i
        },
        style: {
          stroke: axisTick.color
        }
      })
      linesG.add(line)
    }
    // 添加到组元素
    this.axisG.add(linesG)
  }

  /**
   * 添加y轴文字
   * @param {array} data   数据
   * @return   {void}  
   */
  axisLabel(data) {
    const { yHeight } = this.config
    let max = d3.max(data)
    // 创建y轴文字
    const { ticks, label, min } = this.config.yAxis
    let textsG = new zrender.Group()
    // 比例刻度计算
    for(let i = 0; i < ticks; i++) {
      let range = min + i * ((max - min) / (ticks - 1))
      const text = new zrender.Text({
        cursor: 'default',
        style: {
          text: Math.round(range),
          textAlign: 'end',
          y: -yHeight / ticks * i - 6,
          x: 0,
          textFill: label.color,
          opacity: 0
        }
      })
      text.animateTo({
        style: {
          opacity: 1
        }
      }, 400)
      textsG.add(text)
    }
    // 添加到组元素
    this.axisG.add(textsG)
  }
}

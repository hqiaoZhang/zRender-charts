/**
 * @Author:      zhanghq
 * @DateTime:    2018-01-08 11:48:52
 * @Description: 同环比图表
 * @Last Modified By:   zhanghq
 * @Last Modified Time:    2018-01-08 11:48:52
 */

import zrender from 'zrender'
import _ from 'lodash'
import AddAxis from './addAxis.js'
import { zrenderInit } from '../../util/util'

export default class SameRingRation {
  /**
   * 图表默认配置项
   * @return {object} 默认配置项
   */
  defaultSetting () {
    return{
      width: 600,
      height: 300,
      itemStyle: {
        width: 15,
        radius: 10,
        fill: ['#08e2ff', '#0b6fff', '#00eeeb', '#3ed5de', '#ffce10', '#00eeeb'],
        margin: {
          top: 20,
          right: 20,
          bottom: 20,
          left: 20
        }
      }
    }  
  }

  /**
   *  构造函数
   */
  constructor(selector, opt) {
    
    const defaultSetting = this.defaultSetting()
    this.config = _.merge({}, defaultSetting, opt)
    const { width, height, itemStyle } = this.config
    const { top, right, bottom, left } = itemStyle.margin
    this.config.xWidth = width - left - right
    this.config.yHeight = height - top - bottom
    this.zr = zrenderInit(selector, width, height)
    // 实例化坐标轴
    this.addAxis = new AddAxis(this.zr, this.config)
  }

  /**
   *  渲染
   *  @return   {array}  图表数据
   */
  render(data) {
    const self = this
    // 获取value值
    let dataset = []
    let datasets = []
    let nums = Object.keys(data[0])
    // 处理数据
    nums.map((n) => {
      let values = []
      data.map(d => {
        let value = d[n]
        if(typeof value !== 'string'){
          values.push(value)
          dataset.push(value)
        } 
      })
      if(values.length !== 0 ){
        datasets.push(values)
      }
    })

    // x轴
    self.xScale = self.addAxis.renderXAxis(data)
    // y轴
    self.yScale = self.addAxis.renderYAxis(dataset)
    self.setRectAttribute(datasets)
    self.setLineAttribute(datasets[0])
  }

  setLineAttribute(data) {
    const self = this
    const { itemStyle } = self.config
    const { width: iWidth } = itemStyle
    data.map((d, i) => {
 
        const line = new zrender.Polyline({
        points: {
          x1: self.xScale(i) + i * iWidth,
          x2: self.xScale(i + i) + i * iWidth,
          y1: self.yScale(data[i]),
          y2: self.yScale(data[i + 1])
        },
        style: {
          stroke: '#ffce10',
          lineWidth: 4
        }
       
      })
       self.zr.add(line)
      })
   
  }

  /**
   * 矩形属性设置
   * @param {array} data 图表数据
   */
  setRectAttribute(data) {
    const self = this
    const { itemStyle, height } = self.config
    const { fill, margin, width: iWidth } = itemStyle
    const { left, bottom } = margin
    const rectG = new zrender.Group()
    rectG.position = [left, -bottom]
    data.map((d, i) => {
      d.map((v, j) => {
        let h = self.yScale(v)
        let rect = new zrender.Rect({
          shape: {
            width: iWidth,
            height: h,
            x: self.xScale(j) - iWidth + i * iWidth,
            y: height - h
          },
          style: {
            fill: fill[i]
          }
        })
        rectG.add(rect)
      })
    })
    self.zr.add(rectG)
  }
}

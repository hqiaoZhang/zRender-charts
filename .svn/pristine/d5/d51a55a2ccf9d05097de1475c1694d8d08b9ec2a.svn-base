/**
 * @Author:      zhanghq
 * @DateTime:    2018-01-08 11:48:52
 * @Description: 同环比图表
 * @Last Modified By:   zhanghq
 * @Last Modified Time:    2018-01-08 11:48:52
 */

import zrender from 'zrender'
import _ from 'lodash'
import AddAxis from './addAxis.js'
import { zrenderInit } from '../../util/util'
import iconUrl from './images/icon.png'

export default class SameRingRation {
  /**
   * 图表默认配置项
   * @return {object} 默认配置项
   */
  defaultSetting () {
    return{
      width: 600,
      height: 300,
      itemStyle: {
        width: 15,
        radius: 10,
        fill: ['#08e2ff', '#0b6fff', '#00eeeb', '#3ed5de', '#ffce10', '#00eeeb'],
        margin: {
          top: 30,
          right: 20,
          bottom: 20,
          left: 20
        }
      }
    }  
  }

  /**
   *  构造函数
   */
  constructor(selector, opt) {
    
    const defaultSetting = this.defaultSetting()
    this.config = _.merge({}, defaultSetting, opt)
    const { width, height, itemStyle } = this.config
    const { top, right, bottom, left } = itemStyle.margin
    this.config.xWidth = width - left - right
    this.config.yHeight = height - top - bottom
    this.zr = zrenderInit(selector, width, height)
    // 实例化坐标轴
    this.addAxis = new AddAxis(this.zr, this.config)
  }

  /**
   *  渲染
   *  @return   {array}  图表数据
   */
  render(data) {
    const self = this
    // 获取value值
    let tongbiData = [] // 同比数据
    let huanbiData = [] // 环比数据
    let valueData = [] // 数值
    data.map((d) => {  
      tongbiData.push(d.tongbi)
      huanbiData.push(d.huanbi)
      valueData.push(d.value)
    })
    // 获取所有value
    let dataset = [...tongbiData, ...huanbiData]
    // 同比环比取出来
    let newData = [tongbiData, huanbiData]
    console.log(valueData)
    // x轴
    self.xScale = self.addAxis.renderXAxis(data)
    // y轴
    self.yScale = self.addAxis.renderYAxis(dataset)
    self.vScale = self.addAxis.renderYAxis(valueData)
    self.setRectAttribute(newData)
    self.setLineAttribute(valueData)
  }

  setLineAttribute(data) {
    const self = this
    const { itemStyle } = self.config
    const { width: iWidth } = itemStyle
    let lines = []
    let iconG = new zrender.Group()
    data.map((d, i) => {
      let x = self.xScale(i) + iWidth 
      let y = self.vScale(data[i])
      const icon = new zrender.Image({
        style: {
          image: iconUrl,
          width: 20,
          height: 20,
          x: x - 10,
          y: y - 10
        }
      })
      iconG.add(icon)
      lines.push([x, y])
    })
    const polyline = new zrender.Polyline({
      shape: {
        points: lines,
        smooth: '0'
      },
      style: {
        stroke: '#ffce10',
        fill: 'none',
        lineWidth: 2
      }
    })
    self.zr.add(polyline)
    self.zr.add(iconG)
  }

  /**
   * 矩形属性设置
   * @param {array} data 图表数据
   */
  setRectAttribute(data) {
    const self = this
    const { itemStyle, height } = self.config
    const { fill, margin, width: iWidth } = itemStyle
    const { left, bottom } = margin
    const rectG = new zrender.Group()
    rectG.position = [left, -bottom]
    data.map((d, i) => {
      d.map((v, j) => {
        let h = self.yScale(v)
        let rect = new zrender.Rect({
          shape: {
            width: iWidth,
            height: h,
            x: self.xScale(j) - iWidth + i * iWidth,
            y: height - h
          },
          style: {
            fill: fill[i]
          }
        })
        rectG.add(rect)
      })
    })
    self.zr.add(rectG)
  }
}
